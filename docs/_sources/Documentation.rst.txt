.. _doc-phybers:

Documentation
=============

.. _segment-doc:

Segment
-------

This module incorporates a white matter fiber bundle segmentation algorithm, called FiberSeg, which is based on a multi-subject atlas. The algorithm is cited from :cite:`PGuevara-2012, LabraN2017, Andrea-Vazquez-2019`.

.. automodule:: phybers.segment
    :members:


FiberSeg Description
~~~~~~~~~~~~~~~~~~~~

The FiberSeg uses as a measure of similarity between pairs of fibers the maximum Euclidean distance between corresponding points ( :math:`d_{ME}`), defined as:

.. math::
    \begin{equation}
    \label{eq:ecua1}
    d_{ME}(A,B) = \min(\max_{i}(|a_{i}-b_{i}|),\max_{i}(|a_{i}-b_{N_{p}-i}|)) \quad \qquad [1]
    \end{equation}

Where :math:`a_{i}` and :math:`b_{i}` represent the 3D coordinates of the points in fibers A and B, respectively, both having an equal number of points (:math:`N_{p}`) and in direct order. 
This implies that the points of fiber A are sequentially traversed as :math:`a_{i}` = [:math:`a_{1}`, :math:`a_{2}`, …, :math:`a_{N_{p}}`], 
and those of B are similarly defined: :math:`b_{i}` = [:math:`b_{1}`, :math:`b_{2}`, …, :math:`b_{N_{p}}`]. 
Therefore, the reverse order of fiber B is expressed as  :math:`b_{N_{p-i}}` = [ :math:`b_{N_{p}}`, :math:`b_{N_{p-1}}`, …, :math:`b_{1}`].

It aims to classify the subject fibers according to a multi-subject bundle atlas. The bundle atlas consists of a set of representative bundles and an information file.
The fibers of the atlas bundles are called centroids. The fibers of each subject are classified using a maximum :math:`d_{ME}` distance threshold for each bundle between the subject’s fibers and the atlas centroids.
The fibers are labeled with the closest atlas bundle, given that the distance is smaller than the distance threshold.

.. _atlases-download:

Atlases Download
~~~~~~~~~~~~~~~~

We provide one atlas of deep white matter (DWM) bundles :cite:`PGuevara-2012` and two atlases of superficial white matter (SWM) bundles, :cite:`Claudio-Roman-2017` and :cite:`Claudio-Roman-2022`. 
The following links provide access to these three atlases:

1. `Download DWM Bundles Atlas (Pamela Guevara 2012) <https://www.dropbox.com/scl/fo/vy3j1bi56w07arzqnn8gc/h?rlkey=ngppw0xu4a5rbmx6sh0rtyg1o&dl=1>`_
2. `Download SWM Bundles Atlas (Claudio Roman 2017) <https://www.dropbox.com/scl/fo/adjz3yx0pkw6nyekrpyta/h?rlkey=qpzulmnm86kn3a7zu02693t4z&dl=1>`_
3. `Download SWM Bundles Atlas (Claudio Roman 2022) <https://www.dropbox.com/scl/fo/hperwxwe86ai334x41ee5/h?rlkey=sfgz7v34sls40x3wgntmnpa9y&dl=1>`_


In addition to these atlases, we have tested our algorithm with the atlas :cite:`Atlas-Fan-Zhang-2018`, whi  ch contains both  DWM and SWM bundle.
If you need this atlas in data *'.bundle'* format, feel free to contact us via email.

.. autofunction:: fiberseg


.. _clustering-doc:

Clustering
----------

The module comprises two algorithms for clustering cerebral fibers, HClust (Clustering Hierarchical, :cite:`Claudio-Roman-2017, Claudio-Roman-2022`) y FFClust (Fast Fiber Clustering, :cite:`Andrea-Vazquez-2020`)


.. automodule:: phybers.clustering
    :members:


HClust Description
~~~~~~~~~~~~~~~~~~

HClust is an average-link hierarchical agglomerative clustering algorithm which allows finding bundles based on a pairwise fiber distance measure.
The algorithm calculates a distance matrix between all fiber pairs for a bundles dataset (:math:`d_{ij}`), by using the maximum of the Euclidean distance between fiber pairs (Equation [1]).
Then, it computes an affinity graph on the :math:`d_{ij}` matrix for the fiber pairs that have Euclidean distance below a maximum distance threshold (*MaxDistance_Threshold*). 
The Affinity :cite:`ODonnell-2007` is given by the following equation:

.. math::
    \begin{equation}
    a_{ij} = e^{\frac{-d_{ij}}{\sigma^{2}}}
    \end{equation}


where :math:`d_{ij}` is the distance between the elements :math:`i` and :math:`j`, and :math:`\sigma` is a parameter that defines the similarity scale in $mm$.

From the affinity graph, the hierarchical tree is generated using an agglomerative average-link hierarchical clustering algorithm.
The tree is adaptively partitioned using a distance threshold (*PartDistance_Threshold*). 

.. autofunction:: hclust


FFClust Description
~~~~~~~~~~~~~~~~~~~

FFClust is an intra-subject clustering algorithm aims to identify compact and homogeneous fiber clusters on a large tractography dataset.
The algorithm consists of four stages. The stage 1 applies Minibatch K-Means clustering on five fiber points, and it merges fibers sharing the same point clusters (map clustering) in stage 2.
Next, it reassigns small clusters to bigger ones (stage 3) considering distance of fibers in direct and reverse order.
Finally, at stage 4, the algorithm groups clusters sharing the central point and merges close clusters represented by their centroids.
The distance among fibers is defined as the maximum of the Euclidean distance between corresponding points.


.. autofunction:: ffclust

.. _utils-doc:

Utils
-----

The utils are a set of tools used for tractography preprocessing and the analysis of brain fiber clustering and segmentation results.
The module includes tools for reading and writing brain fiber files in *'.bundles'* format, transform the fibers to a reference coordinate system based on a deformation field,
sampling of fibers at n equidistant points, calculation of intersection between sets of brain fibers,
and tools for extracting measures and filtering fiber clusters or segmented bundles.


.. automodule:: phybers.utils
    :members:

Deformation Description
~~~~~~~~~~~~~~~~~~~~~~~

The *deformation* sub-module transforms a tractography file to another space using a non-linear deformation file. 
The maps must be stored in NIfTI format, where the voxels contain the transformation to be applied to each voxel 3D space location.
*deformation* applies the deformation to the 3D coordinates of the fiber points. 
The *deformation* can be employed on HCP(Human Conectome Project) data during the preprocessing stage before applying the segmentation algorithm.

.. autofunction:: deform


Sampling Description
~~~~~~~~~~~~~~~~~~~~

The *sampling* sub-module performs a sampling of the fibers, recalculating their points using a defined number of equidistant points.
The sampling sub-module is used in the preprocessing stage of the segmentation and clustering algorithms.

.. autofunction:: sampling


Intersection Description
~~~~~~~~~~~~~~~~~~~~~~~~

The *bundle intersection* sub-module calculates a similarity measure between two sets of brain fibers (fiber clusters or segmented bundles).
It uses a maximum distance threshold to consider two fibers as similar. Both sets of fibers must be in the same space. 
First, a Euclidean distance matrix is calculated between the fibers of the two sets. 
Then, the maximum distance threshold is applied between fiber pairs and the number of fibers from one set that have a similar fibers in the other set are count, for both sets. 
The similarity measure yields a value between *0* and *100%*. 


.. autofunction:: intersection


Postprocessing Description
~~~~~~~~~~~~~~~~~~~~~~~~~~

The *Postprocessing* sub-module contains a set of algorithms that can be applied on the results of clustering and segmentation algorithms.
This algorithm constructs a `pandas.DataFrame object` , where each key corresponds to the name of the fiber set (cluster or segmented fascicle),
followed by measures defined on the fiber set such as: size (number of fibers), intra-set distance and mean length (in *mm*).
It can be used to perform single or multiple feature filtering on the clustering or segmentation results. 


.. autofunction:: postprocessing

.. _visualization-doc:

Visualization
-------------

The tractography files can be rendered with lines or cilynders.
In the case of lines, the software loads the streamlines with a fixed normal per vertex, which correspond to the normalized direction for the particular segment of the streamline.
Furthermore, a phong lighting algorithm :cite:`ABrainVis` is implemented in a vertex shader to compute the color fetched for the streamline.
The MRI data is rendered by using specific shaders for slice visualization and volume rendering. Meshes can be displayed using points, wireframes or shaded triangles.
The user interface (GUI) allows viewing several objects simultaneously, performing camera operations (zoom, rotate and pan), modifying material properties (color and adding transparency)
and applying linear transformation on the brain tractography.


 .. automodule:: phybers.fibervis
    :members:


* Fiber selection based on 3D ROIs
  This function allows users to extract bundles using 3D objects and labeled 3D images, creating a point-based data structure for fast queries (called Octree).
  It is based on storing points inside a bounding box with a capacity of N. When a node is filled and a new point is added,
  the node subdivides his bounding box in eight new nodes (no overlapping each other) and the points are moved in the new nodes.
  The resulting selected fiber for each object can be used into logical mathematical operations (and, or, xor, not).
  This allows the use of multiple ROIs in order to find fibers that connect some areas, while excluding others that are selected by others areas.

.. autofunction:: start_fibervis